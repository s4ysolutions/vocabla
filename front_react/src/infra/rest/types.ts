/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rest/v1/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description - Vocabulary Entries
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateEntryCommand"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Response"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/entries/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Vocabulary Entries
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    entryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Response"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Ping endpoint that echoes back the provided payload
         *
         *     Diagnostic endpoint to check service health
         *
         *     - Diagnostics
         *      */
        get: {
            parameters: {
                query: {
                    /** @description The payload message to echo back. Must be at least 2 characters long.
                     *
                     *      */
                    payload: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The echoed payload
                 *
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequest400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description - Tags
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTagRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTagResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Tags
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tagId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTagResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The request could not be understood or was missing required parameters. */
        BadRequest400: {
            message: string;
        };
        /** @description Command to create a new vocabulary entry. */
        CreateEntryCommand: {
            /** @description Entry to be added to the vocabulary. */
            entry: components["schemas"]["Entry"];
            /** @description IDs of tags to be associated with the entry. */
            tagIds: number[];
            /**
             * Format: int64
             * @description ID of the student who owns the entry.
             */
            ownerId: number;
        };
        /** @description Command to create a new tag. */
        CreateTagRequest: {
            /** @description Tag to be created. */
            tag: components["schemas"]["Tag"];
        };
        /** @description CreateTagResponse containing the ID of the newly created tag. */
        CreateTagResponse: {
            /**
             * Format: int64
             * @description ID of the newly created tag.
             */
            tagId: number;
        };
        Definition: {
            definition: string;
            langCode: string;
        };
        Entry: {
            headword: components["schemas"]["Headword"];
            definitions: components["schemas"]["Definition"][];
            /** Format: int64 */
            ownerId: number;
        };
        /** @description You do not have permission to access this resource. */
        Forbidden403: {
            message: string;
        };
        /** @description CreateTagResponse containing the tag if found. */
        GetTagResponse: {
            /** @description The retrieved tag. */
            tag?: null | components["schemas"]["Tag"];
        };
        Headword: {
            word: string;
            langCode: string;
        };
        /** @description Internal server error occurred */
        InternalServerError500: {
            message: string;
        };
        /** @description CreateTagResponse containing the entry if found. */
        Response: {
            /** @description The retrieved entry. */
            entry?: null | components["schemas"]["Entry"];
        };
        Tag: {
            label: string;
            /** Format: int64 */
            ownerId: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
