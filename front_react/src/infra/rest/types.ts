/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rest/v1/entries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Vocabulary Entries
         *      */
        get: {
            parameters: {
                query?: {
                    /** @description ID of the owner to filter entries by.
                     *
                     *      */
                    ownerId?: number | null;
                    tagId?: number;
                    lang?: string;
                    /** @description Text to search for in entries.
                     *
                     *      */
                    text?: string | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetEntriesResponse"];
                    };
                };
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequest400"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        /** @description - Vocabulary Entries
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateEntryRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateEntryResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/entries/{entryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Vocabulary Entries
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    entryId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetEntryResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint to retrieve all supported languages
         *
         *     Get all available languages with their codes, names, and flags
         *
         *     - Languages
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of all available languages
                 *
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetLanguagesResponse"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Ping endpoint that echoes back the provided payload
         *
         *     Diagnostic endpoint to check service health
         *
         *     - Diagnostics
         *      */
        get: {
            parameters: {
                query: {
                    /** @description The payload message to echo back. Must be at least 2 characters long.
                     *
                     *      */
                    payload: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The echoed payload
                 *
                 *      */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequest400"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Students Settings
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LearningSettings"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/known-languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description - Students Settings
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddKnownLangRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AddKnownLangResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/known-languages/{langCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description - Students Settings
         *      */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                    langCode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RemoveKnownLangResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/learn-languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description - Students Settings
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddLearnLangRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AddLearnLangResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/learn-languages/{langCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description - Students Settings
         *      */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                    langCode: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RemoveLearnLangResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description - Students Settings
         *      */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTagRequest"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CreateTagResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rest/v1/students/{studentId}/settings/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - Students Settings
         *      */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                    tagId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["GetTagResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** @description - Students Settings
         *      */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: number;
                    tagId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeleteTagResponse"];
                    };
                };
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Forbidden403"];
                    };
                };
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InternalServerError500"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Request to add a language the student knows. */
        AddKnownLangRequest: {
            /** @description Code of the language to be added as known. */
            langCode: string;
        };
        /** @description Response containing the code of the newly added known language. */
        AddKnownLangResponse: {
            /** @description Code of the newly added known language. */
            langCode: string;
        };
        /** @description Request to add a language the student wants to learn. */
        AddLearnLangRequest: {
            /** @description Code of the language to be added for learning. */
            langCode: string;
        };
        /** @description Response containing the code of the newly added language to learn. */
        AddLearnLangResponse: {
            /** @description Code of the newly added language. */
            langCode: string;
        };
        /** @description The request could not be understood or was missing required parameters. */
        BadRequest400: {
            message: string;
        };
        /** @description Command to create a new vocabulary entry. */
        CreateEntryRequest: {
            /** @description Entry to be added to the vocabulary. */
            entry: components["schemas"]["Entry"];
            /** @description IDs of tags to be associated with the entry. */
            tagIds: number[];
        };
        /** @description CreateTagResponse containing the ID of the newly created entry. */
        CreateEntryResponse: {
            /**
             * Format: int64
             * @description ID of the newly created entry.
             */
            entryId: number;
        };
        /** @description Command to create a new tag. */
        CreateTagRequest: {
            /** @description The label of the tag to be created. */
            label: string;
        };
        /** @description CreateTagResponse containing the ID of the newly created tag. */
        CreateTagResponse: {
            /**
             * Format: int64
             * @description ID of the newly created tag.
             */
            tagId: number;
        };
        Definition: {
            definition: string;
            langCode: string;
        };
        /** @description DeleteTagResponse containing the result of the deletion operation. */
        DeleteTagResponse: {
            /** @description Actual deletion status. */
            deleted: boolean;
        };
        Entry: {
            headword: components["schemas"]["Headword"];
            definitions: components["schemas"]["Definition"][];
            /** Format: int64 */
            ownerId: number;
        };
        /** @description You do not have permission to access this resource. */
        Forbidden403: {
            message: string;
        };
        /** @description Response containing a list of entries. */
        GetEntriesResponse: {
            /** @description List of retrieved entries. */
            entries: components["schemas"]["Identified"][];
        };
        /** @description CreateTagResponse containing the entry if found. */
        GetEntryResponse: {
            /** @description The retrieved entry. */
            entry?: null | components["schemas"]["Entry"];
        };
        /** @description Response containing the list of all languages, the default language, and the unknown language. */
        GetLanguagesResponse: {
            defaultLang: components["schemas"]["Lang"];
            unknownLang: components["schemas"]["Lang"];
            languages: components["schemas"]["Lang"][];
        };
        /** @description CreateTagResponse containing the tag if found. */
        GetTagResponse: {
            /** @description The retrieved tag. */
            tag?: null | components["schemas"]["Tag"];
        };
        Headword: {
            word: string;
            langCode: string;
        };
        Identified: {
            /** Format: int64 */
            id: number;
            e: components["schemas"]["Entry"];
        };
        /** @description Internal server error occurred */
        InternalServerError500: {
            message: string;
        };
        Lang: {
            code: string;
            flag: string;
            name: string;
        };
        /** @description Response containing the learning settings of a student. */
        LearningSettings: {
            learnLanguages: string[];
            knownLanguages: string[];
            tags: number[];
        };
        /** @description Response containing the code of the removed known language. */
        RemoveKnownLangResponse: {
            /** @description Code of the removed known language. */
            langCode: string;
        };
        /** @description Response containing the code of the removed learning language. */
        RemoveLearnLangResponse: {
            /** @description Code of the removed learning language. */
            langCode: string;
        };
        Tag: {
            label: string;
            /** Format: int64 */
            ownerId: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
