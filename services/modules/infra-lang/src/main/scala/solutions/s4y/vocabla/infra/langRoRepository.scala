package solutions.s4y.vocabla.infra

import solutions.s4y.vocabla.app.repo.LangRepository
import solutions.s4y.vocabla.domain.Lang
import zio.{Chunk, ZLayer}

val langRoRepository: LangRepository = new LangRepository:
  override val defaultLang: Lang = Lang("en", "🇬🇧", "English")
  override val unknownLang: Lang = Lang("unk", "❓", "Unknown")
  override def getLangs: Chunk[Lang] =
    Chunk(
      defaultLang,
      Lang("de", "🇩🇪", "Deutsch"),
      Lang("fr", "🇫🇷", "Français"),
      Lang("es", "🇪🇸", "Español"),
      Lang("it", "🇮🇹", "Italiano"),
      Lang("ru", "🇷🇺", "Русский"),
      Lang("zh", "🇨🇳", "中文"),
      Lang("ja", "🇯🇵", "日本語"),
      Lang("ko", "🇰🇷", "한국어"),
      Lang("ar", "🇸🇦", "العربية"),
      Lang("pt", "🇵🇹", "Português"),
      Lang("hi", "🇮🇳", "हिन्दी"),
      Lang("bn", "🇧🇩", "বাংলা"),
      Lang("ur", "🇵🇰", "اردو"),
      Lang("tr", "🇹🇷", "Türkçe"),
      Lang("vi", "🇻🇳", "Tiếng Việt"),
      Lang("pl", "🇵🇱", "Polski"),
      Lang("uk", "🇺🇦", "Українська"),
      Lang("nl", "🇳🇱", "Nederlands"),
      Lang("sv", "🇸🇪", "Svenska"),
      Lang("no", "🇳🇴", "Norsk"),
      Lang("da", "🇩🇰", "Dansk"),
      Lang("fi", "🇫🇮", "Suomi"),
      Lang("cs", "🇨🇿", "Čeština"),
      Lang("el", "🇬🇷", "Ελληνικά"),
      Lang("hu", "🇭🇺", "Magyar"),
      Lang("ro", "🇷🇴", "Română"),
      Lang("sr", "🇷🇸", "Српски"),
      Lang("sk", "🇸🇰", "Slovenčina"),
      Lang("bg", "🇧🇬", "Български"),
      Lang("hr", "🇭🇷", "Hrvatski"),
      Lang("he", "🇮🇱", "עברית"),
      Lang("id", "🇮🇩", "Bahasa Indonesia"),
      Lang("ms", "🇲🇾", "Bahasa Melayu"),
      Lang("th", "🇹🇭", "ไทย"),
      Lang("fa", "🇮🇷", "فارسی"),
      Lang("sw", "🇰🇪", "Kiswahili"),
      Lang("ta", "🇱🇰", "தமிழ்"),
      Lang("te", "🇮🇳", "తెలుగు"),
      Lang("ml", "🇮🇳", "മലയാളം"),
      Lang("kn", "🇮🇳", "ಕನ್ನಡ"),
      Lang("mr", "🇮🇳", "मराठी"),
      Lang("pa", "🇮🇳", "ਪੰਜਾਬੀ"),
      Lang("gu", "🇮🇳", "ગુજરાતી"),
      Lang("am", "🇪🇹", "አማርኛ"),
      Lang("my", "🇲🇲", "မြန်မာစာ"),
      Lang("km", "🇰🇭", "ភាសាខ្មែរ"),
      Lang("lo", "🇱🇦", "ລາວ"),
      Lang("si", "🇱🇰", "සිංහල"),
      Lang("sl", "🇸🇮", "Slovenščina"),
      Lang("et", "🇪🇪", "Eesti"),
      Lang("lv", "🇱🇻", "Latviešu"),
      Lang("lt", "🇱🇹", "Lietuvių"),
      Lang("is", "🇮🇸", "Íslenska"),
      Lang("ga", "🇮🇪", "Gaeilge"),
      Lang("cy", "🏴", "Cymraeg"),
      Lang("mt", "🇲🇹", "Malti"),
      Lang("sq", "🇦🇱", "Shqip"),
      Lang("mk", "🇲🇰", "Македонски"),
      Lang("bs", "🇧🇦", "Bosanski"),
      Lang("az", "🇦🇿", "Azərbaycan"),
      Lang("ka", "🇬🇪", "ქართული"),
      Lang("hy", "🇦🇲", "Հայերեն"),
      Lang("mn", "🇲🇳", "Монгол"),
      Lang("uz", "🇺🇿", "Oʻzbekcha"),
      Lang("kk", "🇰🇿", "Қазақша"),
      Lang("tg", "🇹🇯", "Тоҷикӣ"),
      Lang("tk", "🇹🇲", "Türkmençe"),
      Lang("ky", "🇰🇬", "Кыргызча"),
      // Additional African languages
      Lang("yo", "🇳🇬", "Yorùbá"),
      Lang("ig", "🇳🇬", "Igbo"),
      Lang("ha", "🇳🇬", "Hausa"),
      Lang("zu", "🇿🇦", "isiZulu"),
      Lang("xh", "🇿🇦", "isiXhosa"),
      Lang("af", "🇿🇦", "Afrikaans"),
      Lang("so", "🇸🇴", "Soomaali"),
      Lang("ti", "🇪🇷", "ትግርኛ"),
      Lang("om", "🇪🇹", "Afaan Oromoo"),
      Lang("mg", "🇲🇬", "Malagasy"),
      Lang("rw", "🇷🇼", "Kinyarwanda"),
      Lang("sn", "🇿🇼", "chiShona"),
      Lang("st", "🇱🇸", "Sesotho"),
      Lang("tn", "🇧🇼", "Setswana"),
      Lang("wo", "🇸🇳", "Wolof"),
      // Additional Asian languages
      Lang("ne", "🇳🇵", "नेपाली"),
      Lang("or", "🇮🇳", "ଓଡ଼ିଆ"),
      Lang("as", "🇮🇳", "অসমীয়া"),
      Lang("sa", "🇮🇳", "संस्कृतम्"),
      Lang("sd", "🇵🇰", "سنڌي"),
      Lang("ps", "🇦🇫", "پښتو"),
      Lang("tl", "🇵🇭", "Filipino"),
      Lang("ceb", "🇵🇭", "Cebuano"),
      Lang("jv", "🇮🇩", "Basa Jawa"),
      Lang("su", "🇮🇩", "Basa Sunda"),
      Lang("mad", "🇮🇩", "Basa Madura"),
      Lang("min", "🇮🇩", "Baso Minangkabau"),
      Lang("bug", "🇮🇩", "Basa Ugi"),
      Lang("ban", "🇮🇩", "Basa Bali"),
      Lang("tet", "🇹🇱", "Tetun"),
      Lang("dv", "🇲🇻", "ދިވެހި"),
      // Additional European languages
      Lang("eu", "🇪🇸", "Euskera"),
      Lang("ca", "🇪🇸", "Català"),
      Lang("gl", "🇪🇸", "Galego"),
      Lang("oc", "🇫🇷", "Occitan"),
      Lang("br", "🇫🇷", "Brezhoneg"),
      Lang("co", "🇫🇷", "Corsu"),
      Lang("rm", "🇨🇭", "Rumantsch"),
      Lang("fur", "🇮🇹", "Furlan"),
      Lang("sc", "🇮🇹", "Sardu"),
      Lang("vec", "🇮🇹", "Vèneto"),
      Lang("nap", "🇮🇹", "Napulitano"),
      Lang("lij", "🇮🇹", "Ligure"),
      Lang("pms", "🇮🇹", "Piemontèis"),
      Lang("lmo", "🇮🇹", "Lombard"),
      Lang("scn", "🇮🇹", "Sicilianu"),
      // Additional Middle Eastern languages
      Lang("ku", "🇹🇷", "Kurdî"),
      Lang("ckb", "🇮🇶", "کوردی"),
      Lang("lrc", "🇮🇷", "لۊری"),
      Lang("mzn", "🇮🇷", "مازِرونی"),
      Lang("glk", "🇮🇷", "گیلکی"),
      Lang("bal", "🇵🇰", "بلۏچی"),
      Lang("arc", "🇸🇾", "ܐܪܡܝܐ"),
      // Additional Americas languages
      Lang("qu", "🇵🇪", "Runasimi"),
      Lang("ay", "🇧🇴", "Aymar aru"),
      Lang("gn", "🇵🇾", "Avañe'ẽ"),
      Lang("nah", "🇲🇽", "Nāhuatl"),
      Lang("yua", "🇲🇽", "Màaya T'àan"),
      Lang("iu", "🇨🇦", "ᐃᓄᒃᑎᑐᑦ"),
      Lang("cr", "🇨🇦", "ᓀᐦᐃᔭᐍᐏᐣ"),
      Lang("oj", "🇨🇦", "ᐊᓂᔑᓇᐯᒧᐎᓐ"),
      // Additional Pacific languages
      Lang("mi", "🇳🇿", "Te Reo Māori"),
      Lang("sm", "🇼🇸", "Gagana Samoa"),
      Lang("to", "🇹🇴", "Lea faka-Tonga"),
      Lang("fj", "🇫🇯", "Basa Vaka-Viti"),
      Lang("haw", "🇺🇸", "'Ōlelo Hawai'i"),
      Lang("ty", "🇵🇫", "Reo Tahiti"),
      Lang("ch", "🇬🇺", "Chamoru"),
      // Additional Central Asian languages
      Lang("bak", "🇷🇺", "Башҡорт теле"),
      Lang("tt", "🇷🇺", "Татар теле"),
      Lang("cv", "🇷🇺", "Чӑваш чӗлхи"),
      Lang("udm", "🇷🇺", "Удмурт кыл"),
      Lang("kv", "🇷🇺", "Коми кыв"),
      Lang("mhr", "🇷🇺", "Марий йылме"),
      Lang("myv", "🇷🇺", "Эрзянь кель"),
      Lang("mdf", "🇷🇺", "Мокшень кяль"),
      Lang("sah", "🇷🇺", "Саха тыла"),
      Lang("tyv", "🇷🇺", "Тыва дыл"),
      Lang("alt", "🇷🇺", "Алтай тил"),
      Lang("kjh", "🇷🇺", "Хакас тілі"),
      Lang("xal", "🇷🇺", "Хальмг келн"),
      Lang("bua", "🇷🇺", "Буряад хэлэн"),
      // Additional Southeast Asian languages
      Lang("ace", "🇮🇩", "Basa Acèh"),
      Lang("bjn", "🇮🇩", "Bahasa Banjar"),
      Lang("map-bms", "🇮🇩", "Basa Banyumasan"),
      Lang("btk", "🇮🇩", "Hata Batak"),
      Lang("rej", "🇮🇩", "Bahasa Rejang"),
      Lang("lv", "🇱🇻", "Latviešu"),
      Lang("war", "🇵🇭", "Winaray"),
      Lang("hil", "🇵🇭", "Hiligaynon"),
      Lang("ilo", "🇵🇭", "Ilokano"),
      Lang("pag", "🇵🇭", "Pangasinan"),
      Lang("pam", "🇵🇭", "Kapampangan"),
      Lang("bik", "🇵🇭", "Bikol"),
      // Additional sign languages and constructed languages
      Lang("jbo", "🌍", "Lojban"),
      Lang("ia", "🌍", "Interlingua"),
      Lang("ie", "🌍", "Interlingue"),
      Lang("eo", "🌍", "Esperanto"),
      Lang("vo", "🌍", "Volapük"),
      Lang("nov", "🌍", "Novial"),
      Lang("ido", "🌍", "Ido"),
      Lang("an", "🇪🇸", "Aragonés"),
      Lang("ast", "🇪🇸", "Asturianu"),
      Lang("ext", "🇪🇸", "Estremeñu"),
      Lang("mwl", "🇵🇹", "Mirandés")
    )

  override def getLang(
      code: String
  ): Lang = {
    getLangs.find(_.code == code).getOrElse(unknownLang)
  }

end langRoRepository

object LangRoRepository:
  val layer: ZLayer[Any, Nothing, LangRepository] =
    ZLayer.succeed(langRoRepository)